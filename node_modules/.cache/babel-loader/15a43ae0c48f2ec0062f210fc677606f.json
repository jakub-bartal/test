{"ast":null,"code":"import _toConsumableArray from \"/Users/kubo/Projects/webscope-demo/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { authors, articles, teams } from \"./const\"; // export function getTeamArticlesDescription(teamId) {\n//     const teamMembersIds = teams.find(team => team.id === teamId).members;\n//     const teamMembers = authors.filter(author => teamMembersIds.includes(author.id));\n//     let teamArticles = [];\n//\n//     const membersWithArticlesStringFormat = teamMembers.map(member => {\n//         const memberArticles = articles.filter(article => article.authors && article.authors.includes(member.id));\n//         teamArticles = teamArticles.concat(memberArticles);\n//\n//         return {\n//             name: member.name,\n//             articles: memberArticles,\n//         };\n//     }).map(member => `${member.name} wrote ${getArticlesStringFormat(member.articles)}\\n`).join('');\n//\n//     return `${membersWithArticlesStringFormat}-----\\nTeam 'Webscope ${teamId}' co-authored ${[...new Set(teamArticles)].length} out of ${articles.length} articles.`;\n// }\n\nexport function getTeamArticlesDescription(teamId) {\n  var membersIds = teams.find(function (team) {\n    return team.id === teamId;\n  }).members;\n  var teamArticles = [];\n  return membersIds.map(function (memberId) {\n    return authors.find(function (author) {\n      return author.id === memberId;\n    });\n  }) // returns each author based on memberId\n  .map(function (member, index) {\n    var memberArticles = articles.filter(function (article) {\n      return article.authors && article.authors.includes(member.id);\n    });\n    var result = \"\".concat(member.name, \" wrote \").concat(getArticlesStringFormat(memberArticles), \"\\n\");\n    teamArticles = teamArticles.concat(memberArticles);\n\n    if (membersIds.length - 1 === index) {\n      result = result.concat(\"-----\\nTeam 'Webscope \".concat(teamId, \"' co-authored \").concat(_toConsumableArray(new Set(teamArticles)).length, \" out of \").concat(articles.length, \" articles.\"));\n    }\n\n    return result;\n  }).join(\"\");\n}\n\nfunction getArticlesStringFormat(articles) {\n  if (articles.length === 0) {\n    return \"0 articles.\";\n  } else if (articles.length === 1) {\n    return \"an article '\".concat(articles[0].text, \"'\");\n  } else if (articles.length === 2) {\n    return \"articles '\".concat(articles[0].text, \"' and '\").concat(articles[1].text, \"'\");\n  } else if (articles.length > 2) {\n    return \"articles '\".concat(articles[0].text, \"', '\").concat(articles[1].text, \"' and \").concat(articles.length - 2, \" more.\");\n  }\n\n  return '';\n}","map":{"version":3,"sources":["/Users/kubo/Projects/webscope-demo/src/getTeamArticlesDescription/index.js"],"names":["authors","articles","teams","getTeamArticlesDescription","teamId","membersIds","find","team","id","members","teamArticles","map","memberId","author","member","index","memberArticles","filter","article","includes","result","name","getArticlesStringFormat","concat","length","Set","join","text"],"mappings":";AAAA,SAAQA,OAAR,EAAiBC,QAAjB,EAA2BC,KAA3B,QAAuC,SAAvC,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,0BAAT,CAAoCC,MAApC,EAA4C;AAC/C,MAAMC,UAAU,GAAGH,KAAK,CAACI,IAAN,CAAW,UAAAC,IAAI;AAAA,WAAIA,IAAI,CAACC,EAAL,KAAYJ,MAAhB;AAAA,GAAf,EAAuCK,OAA1D;AACA,MAAIC,YAAY,GAAG,EAAnB;AAEA,SAAOL,UAAU,CACZM,GADE,CACE,UAAAC,QAAQ;AAAA,WAAIZ,OAAO,CAACM,IAAR,CAAa,UAAAO,MAAM;AAAA,aAAIA,MAAM,CAACL,EAAP,KAAcI,QAAlB;AAAA,KAAnB,CAAJ;AAAA,GADV,EAC8D;AAD9D,GAEFD,GAFE,CAEE,UAACG,MAAD,EAASC,KAAT,EAAmB;AACpB,QAAMC,cAAc,GAAGf,QAAQ,CAACgB,MAAT,CAAgB,UAAAC,OAAO;AAAA,aAAIA,OAAO,CAAClB,OAAR,IAAmBkB,OAAO,CAAClB,OAAR,CAAgBmB,QAAhB,CAAyBL,MAAM,CAACN,EAAhC,CAAvB;AAAA,KAAvB,CAAvB;AACA,QAAIY,MAAM,aAAMN,MAAM,CAACO,IAAb,oBAA2BC,uBAAuB,CAACN,cAAD,CAAlD,OAAV;AACAN,IAAAA,YAAY,GAAGA,YAAY,CAACa,MAAb,CAAoBP,cAApB,CAAf;;AAEA,QAAIX,UAAU,CAACmB,MAAX,GAAoB,CAApB,KAA0BT,KAA9B,EAAqC;AACjCK,MAAAA,MAAM,GAAGA,MAAM,CAACG,MAAP,iCAAuCnB,MAAvC,2BAA8D,mBAAI,IAAIqB,GAAJ,CAAQf,YAAR,CAAJ,EAA2Bc,MAAzF,qBAA0GvB,QAAQ,CAACuB,MAAnH,gBAAT;AACH;;AAED,WAAOJ,MAAP;AACH,GAZE,EAYAM,IAZA,CAYK,EAZL,CAAP;AAaH;;AAED,SAASJ,uBAAT,CAAiCrB,QAAjC,EAA2C;AACvC,MAAIA,QAAQ,CAACuB,MAAT,KAAoB,CAAxB,EAA2B;AACvB;AACH,GAFD,MAEO,IAAIvB,QAAQ,CAACuB,MAAT,KAAoB,CAAxB,EAA2B;AAC9B,iCAAsBvB,QAAQ,CAAC,CAAD,CAAR,CAAY0B,IAAlC;AACH,GAFM,MAEA,IAAI1B,QAAQ,CAACuB,MAAT,KAAoB,CAAxB,EAA2B;AAC9B,+BAAoBvB,QAAQ,CAAC,CAAD,CAAR,CAAY0B,IAAhC,oBAA8C1B,QAAQ,CAAC,CAAD,CAAR,CAAY0B,IAA1D;AACH,GAFM,MAEA,IAAI1B,QAAQ,CAACuB,MAAT,GAAkB,CAAtB,EAAyB;AAC5B,+BAAoBvB,QAAQ,CAAC,CAAD,CAAR,CAAY0B,IAAhC,iBAA2C1B,QAAQ,CAAC,CAAD,CAAR,CAAY0B,IAAvD,mBAAoE1B,QAAQ,CAACuB,MAAT,GAAkB,CAAtF;AACH;;AAED,SAAO,EAAP;AACH","sourcesContent":["import {authors, articles, teams} from \"./const\";\n\n// export function getTeamArticlesDescription(teamId) {\n//     const teamMembersIds = teams.find(team => team.id === teamId).members;\n//     const teamMembers = authors.filter(author => teamMembersIds.includes(author.id));\n//     let teamArticles = [];\n//\n//     const membersWithArticlesStringFormat = teamMembers.map(member => {\n//         const memberArticles = articles.filter(article => article.authors && article.authors.includes(member.id));\n//         teamArticles = teamArticles.concat(memberArticles);\n//\n//         return {\n//             name: member.name,\n//             articles: memberArticles,\n//         };\n//     }).map(member => `${member.name} wrote ${getArticlesStringFormat(member.articles)}\\n`).join('');\n//\n//     return `${membersWithArticlesStringFormat}-----\\nTeam 'Webscope ${teamId}' co-authored ${[...new Set(teamArticles)].length} out of ${articles.length} articles.`;\n// }\n\nexport function getTeamArticlesDescription(teamId) {\n    const membersIds = teams.find(team => team.id === teamId).members;\n    let teamArticles = [];\n\n    return membersIds\n        .map(memberId => authors.find(author => author.id === memberId)) // returns each author based on memberId\n        .map((member, index) => {\n            const memberArticles = articles.filter(article => article.authors && article.authors.includes(member.id));\n            let result = `${member.name} wrote ${getArticlesStringFormat(memberArticles)}\\n`;\n            teamArticles = teamArticles.concat(memberArticles);\n\n            if (membersIds.length - 1 === index) {\n                result = result.concat(`-----\\nTeam 'Webscope ${teamId}' co-authored ${[...new Set(teamArticles)].length} out of ${articles.length} articles.`);\n            }\n\n            return result;\n        }).join(\"\");\n}\n\nfunction getArticlesStringFormat(articles) {\n    if (articles.length === 0) {\n        return `0 articles.`;\n    } else if (articles.length === 1) {\n        return `an article '${articles[0].text}'`;\n    } else if (articles.length === 2) {\n        return `articles '${articles[0].text}' and '${articles[1].text}'`;\n    } else if (articles.length > 2) {\n        return `articles '${articles[0].text}', '${articles[1].text}' and ${articles.length - 2} more.`;\n    }\n\n    return '';\n}"]},"metadata":{},"sourceType":"module"}