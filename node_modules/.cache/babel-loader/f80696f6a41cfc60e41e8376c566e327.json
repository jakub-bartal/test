{"ast":null,"code":"import _toConsumableArray from \"/Users/kubo/Projects/webscope-demo/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { authors, articles, teams } from \"./const\"; // export function getTeamArticlesDescription(teamId) {\n//     const teamMembersIds = teams.find(team => team.id === teamId).members;\n//     const teamMembers = authors.filter(author => teamMembersIds.includes(author.id));\n//     let teamArticles = [];\n//\n//     const membersWithArticlesStringFormat = teamMembers.map(member => {\n//         const memberArticles = articles.filter(article => article.authors && article.authors.includes(member.id));\n//         teamArticles = teamArticles.concat(memberArticles);\n//\n//         return {\n//             name: member.name,\n//             articles: memberArticles,\n//         };\n//     }).map(member => `${member.name} wrote ${getArticlesStringFormat(member.articles)}\\n`).join('');\n//\n//     return `${membersWithArticlesStringFormat}-----\\nTeam 'Webscope ${teamId}' co-authored ${[...new Set(teamArticles)].length} out of ${articles.length} articles.`;\n// }\n\nexport function getTeamArticlesDescription(teamId) {\n  var _this = this;\n\n  return teams.find(function (team) {\n    return team.id === teamId;\n  }).members // membersId = [1, 2, 3, 4, 5]\n  .map(function (memberId) {\n    return authors.find(function (author) {\n      return author.id === memberId;\n    });\n  }) // returns each author based on memberId\n  .map(function (member) {\n    var memberArticles = articles.filter(function (article) {\n      return article.authors && article.authors.includes(member.id);\n    });\n    return {\n      name: member.name,\n      articles: memberArticles,\n      teamArticles: _this.teamArticles.concat(memberArticles)\n    };\n  }).map(function (member) {\n    return \"\".concat(member.name, \" wrote \").concat(getArticlesStringFormat(member.articles), \"\\n\");\n  });\n  return \"\".concat(membersWithArticlesStringFormat, \"-----\\nTeam 'Webscope \").concat(teamId, \"' co-authored \").concat(_toConsumableArray(new Set(teamArticles)).length, \" out of \").concat(articles.length, \" articles.\");\n}\n\nfunction getArticlesStringFormat(articles) {\n  if (articles.length === 0) {\n    return \"0 articles.\";\n  } else if (articles.length === 1) {\n    return \"an article '\".concat(articles[0].text, \"'\");\n  } else if (articles.length === 2) {\n    return \"articles '\".concat(articles[0].text, \"' and '\").concat(articles[1].text, \"'\");\n  } else if (articles.length > 2) {\n    return \"articles '\".concat(articles[0].text, \"', '\").concat(articles[1].text, \"' and \").concat(articles.length - 2, \" more.\");\n  }\n\n  return '';\n}","map":{"version":3,"sources":["/Users/kubo/Projects/webscope-demo/src/getTeamArticlesDescription/index.js"],"names":["authors","articles","teams","getTeamArticlesDescription","teamId","find","team","id","members","map","memberId","author","member","memberArticles","filter","article","includes","name","teamArticles","concat","getArticlesStringFormat","membersWithArticlesStringFormat","Set","length","text"],"mappings":";AAAA,SAAQA,OAAR,EAAiBC,QAAjB,EAA2BC,KAA3B,QAAuC,SAAvC,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,0BAAT,CAAoCC,MAApC,EAA4C;AAAA;;AAC/C,SAAOF,KAAK,CAACG,IAAN,CAAW,UAAAC,IAAI;AAAA,WAAIA,IAAI,CAACC,EAAL,KAAYH,MAAhB;AAAA,GAAf,EAAuCI,OAAvC,CAA+C;AAA/C,GACFC,GADE,CACE,UAAAC,QAAQ;AAAA,WAAIV,OAAO,CAACK,IAAR,CAAa,UAAAM,MAAM;AAAA,aAAIA,MAAM,CAACJ,EAAP,KAAcG,QAAlB;AAAA,KAAnB,CAAJ;AAAA,GADV,EAC8D;AAD9D,GAEFD,GAFE,CAEE,UAAAG,MAAM,EAAI;AACX,QAAMC,cAAc,GAAGZ,QAAQ,CAACa,MAAT,CAAgB,UAAAC,OAAO;AAAA,aAAIA,OAAO,CAACf,OAAR,IAAmBe,OAAO,CAACf,OAAR,CAAgBgB,QAAhB,CAAyBJ,MAAM,CAACL,EAAhC,CAAvB;AAAA,KAAvB,CAAvB;AACA,WAAO;AACHU,MAAAA,IAAI,EAAEL,MAAM,CAACK,IADV;AAEHhB,MAAAA,QAAQ,EAAEY,cAFP;AAGHK,MAAAA,YAAY,EAAE,KAAI,CAACA,YAAL,CAAkBC,MAAlB,CAAyBN,cAAzB;AAHX,KAAP;AAKH,GATE,EAUFJ,GAVE,CAUE,UAAAG,MAAM;AAAA,qBAAOA,MAAM,CAACK,IAAd,oBAA4BG,uBAAuB,CAACR,MAAM,CAACX,QAAR,CAAnD;AAAA,GAVR,CAAP;AAYA,mBAAUoB,+BAAV,mCAAkEjB,MAAlE,2BAAyF,mBAAI,IAAIkB,GAAJ,CAAQJ,YAAR,CAAJ,EAA2BK,MAApH,qBAAqItB,QAAQ,CAACsB,MAA9I;AACH;;AAED,SAASH,uBAAT,CAAiCnB,QAAjC,EAA2C;AACvC,MAAIA,QAAQ,CAACsB,MAAT,KAAoB,CAAxB,EAA2B;AACvB;AACH,GAFD,MAEO,IAAItB,QAAQ,CAACsB,MAAT,KAAoB,CAAxB,EAA2B;AAC9B,iCAAsBtB,QAAQ,CAAC,CAAD,CAAR,CAAYuB,IAAlC;AACH,GAFM,MAEA,IAAIvB,QAAQ,CAACsB,MAAT,KAAoB,CAAxB,EAA2B;AAC9B,+BAAoBtB,QAAQ,CAAC,CAAD,CAAR,CAAYuB,IAAhC,oBAA8CvB,QAAQ,CAAC,CAAD,CAAR,CAAYuB,IAA1D;AACH,GAFM,MAEA,IAAIvB,QAAQ,CAACsB,MAAT,GAAkB,CAAtB,EAAyB;AAC5B,+BAAoBtB,QAAQ,CAAC,CAAD,CAAR,CAAYuB,IAAhC,iBAA2CvB,QAAQ,CAAC,CAAD,CAAR,CAAYuB,IAAvD,mBAAoEvB,QAAQ,CAACsB,MAAT,GAAkB,CAAtF;AACH;;AAED,SAAO,EAAP;AACH","sourcesContent":["import {authors, articles, teams} from \"./const\";\n\n// export function getTeamArticlesDescription(teamId) {\n//     const teamMembersIds = teams.find(team => team.id === teamId).members;\n//     const teamMembers = authors.filter(author => teamMembersIds.includes(author.id));\n//     let teamArticles = [];\n//\n//     const membersWithArticlesStringFormat = teamMembers.map(member => {\n//         const memberArticles = articles.filter(article => article.authors && article.authors.includes(member.id));\n//         teamArticles = teamArticles.concat(memberArticles);\n//\n//         return {\n//             name: member.name,\n//             articles: memberArticles,\n//         };\n//     }).map(member => `${member.name} wrote ${getArticlesStringFormat(member.articles)}\\n`).join('');\n//\n//     return `${membersWithArticlesStringFormat}-----\\nTeam 'Webscope ${teamId}' co-authored ${[...new Set(teamArticles)].length} out of ${articles.length} articles.`;\n// }\n\nexport function getTeamArticlesDescription(teamId) {\n    return teams.find(team => team.id === teamId).members // membersId = [1, 2, 3, 4, 5]\n        .map(memberId => authors.find(author => author.id === memberId)) // returns each author based on memberId\n        .map(member => {\n            const memberArticles = articles.filter(article => article.authors && article.authors.includes(member.id));\n            return {\n                name: member.name,\n                articles: memberArticles,\n                teamArticles: this.teamArticles.concat(memberArticles),\n            }\n        })\n        .map(member => `${member.name} wrote ${getArticlesStringFormat(member.articles)}\\n`);\n\n    return `${membersWithArticlesStringFormat}-----\\nTeam 'Webscope ${teamId}' co-authored ${[...new Set(teamArticles)].length} out of ${articles.length} articles.`;\n}\n\nfunction getArticlesStringFormat(articles) {\n    if (articles.length === 0) {\n        return `0 articles.`;\n    } else if (articles.length === 1) {\n        return `an article '${articles[0].text}'`;\n    } else if (articles.length === 2) {\n        return `articles '${articles[0].text}' and '${articles[1].text}'`;\n    } else if (articles.length > 2) {\n        return `articles '${articles[0].text}', '${articles[1].text}' and ${articles.length - 2} more.`;\n    }\n\n    return '';\n}"]},"metadata":{},"sourceType":"module"}