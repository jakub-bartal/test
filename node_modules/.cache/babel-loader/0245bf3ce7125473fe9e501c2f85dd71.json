{"ast":null,"code":"import _classCallCheck from \"/Users/kubo/Projects/webscope-demo/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kubo/Projects/webscope-demo/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kubo/Projects/webscope-demo/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kubo/Projects/webscope-demo/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kubo/Projects/webscope-demo/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kubo/Projects/webscope-demo/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.firstToUpper = function () {\n      // These are converting just first letter of the string.\n      // 1) Lowercase and uppercase letters are separated from each other just with 32 points in ascii table\n      // const asciiCodeForFirstLetter = input.charCodeAt(0);\n      // const upperCaseLetterAlternative = String.fromCharCode(asciiCodeForFirstLetter - 32)\n      // return upperCaseLetterAlternative + input.slice(1);\n      // 2) Using javascript build-in method toUpperCase() as alternative\n      // return `${stringToFormat.charAt(0).toUpperCase()}${stringToFormat.slice(1)}`;\n      // 3) Using regex as alternative for method charAt()\n      // return stringToFormat.replace(/ˆ\\w/, c => c.toUpperCase());\n      // let result = '';\n      // for (let i = 0; i < input.length; ++i) {\n      //   let charCode = input.charCodeAt(i);\n      //   if (charCode < 65 || charCode > 90) {\n      //     // NOT an uppercase ASCII character\n      //     // Append the original character\n      //     result += input.substr(i, 1);\n      //   } else {\n      //     // Character in the ['A'..'Z'] range\n      //     // Append the lowercase character\n      //     result += String.fromCharCode(charCode + 32);\n      //   }\n      // }\n      //\n      // return result;\n      // const splicedValue = this.state.value.split(\" \");\n      // const toUpper = splicedValue.map(word => {\n      //   const value = word.replace(/ˆ\\w/, c => {return c.toUpperCase()})\n      //   console.log(word, value);\n      //   return value;\n      // });\n      // const joinedValue = toUpper.join(\" \");\n      // const reg = new RegExp(\"\\\\\\\\b[a-zA-Z]\");\n      // const splittedValue = this.state.value.split(\" \");\n      // const toUpper = splittedValue.map(word => word.replace(/^\\w/, function (chr) {return chr.toUpperCase();}))\n      // console.log(toUpper, toUpper.join(\" \"));\n      // console.log(this.state.value.split(\" \").map(word => word.replace(/^\\w/, function (chr) {return chr.toUpperCase();})).join(\" \"));\n      var result = _this.coolAdd(4, 5);\n\n      var result1 = _this.coolAdd(4)(5);\n\n      console.log(result, result1);\n    };\n\n    _this.coolAdd = function (firstArg, secondArg) {\n      if (secondArg) {\n        return firstArg + secondArg;\n      }\n\n      return function (secondArgument) {\n        return firstArg + secondArgument;\n      };\n    };\n\n    _this.onInputChange = function (_ref) {\n      var target = _ref.target;\n\n      _this.setState({\n        value: target.value\n      });\n    };\n\n    _this.state = {\n      value: ''\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        value: this.state.value,\n        onChange: this.onInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.firstToUpper,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, \"click\"));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/kubo/Projects/webscope-demo/src/App.js"],"names":["React","Component","App","props","firstToUpper","result","coolAdd","result1","console","log","firstArg","secondArg","secondArgument","onInputChange","target","setState","value","state"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;;IAEMC,G;;;;;AAEJ,eAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,6EAAMA,KAAN;;AADiB,UAQnBC,YARmB,GAQJ,YAAM;AACnB;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACF;AAEA;AACA;AAGE;AAEA;AACA,UAAMC,MAAM,GAAG,MAAKC,OAAL,CAAa,CAAb,EAAgB,CAAhB,CAAf;;AACA,UAAMC,OAAO,GAAG,MAAKD,OAAL,CAAa,CAAb,EAAgB,CAAhB,CAAhB;;AAEAE,MAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ,EAAoBE,OAApB;AACD,KAzDkB;;AAAA,UA2DnBD,OA3DmB,GA2DT,UAACI,QAAD,EAAWC,SAAX,EAAyB;AACjC,UAAIA,SAAJ,EAAe;AACb,eAAOD,QAAQ,GAAGC,SAAlB;AACD;;AAED,aAAO,UAACC,cAAD,EAAoB;AACzB,eAAOF,QAAQ,GAAGE,cAAlB;AACD,OAFD;AAGD,KAnEkB;;AAAA,UAqEnBC,aArEmB,GAqEH,gBAAc;AAAA,UAAZC,MAAY,QAAZA,MAAY;;AAC5B,YAAKC,QAAL,CAAc;AAACC,QAAAA,KAAK,EAAEF,MAAM,CAACE;AAAf,OAAd;AACD,KAvEkB;;AAGjB,UAAKC,KAAL,GAAa;AACXD,MAAAA,KAAK,EAAE;AADI,KAAb;AAHiB;AAMlB;;;;6BAmEQ;AACP,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AACE,QAAA,KAAK,EAAE,KAAKC,KAAL,CAAWD,KADpB;AAEE,QAAA,QAAQ,EAAE,KAAKH,aAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAKE;AACE,QAAA,OAAO,EAAE,KAAKT,YADhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBALF,CADF;AAaD;;;;EAzFeH,S;;AA4FlB,eAAeC,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: '',\n    }\n  }\n\n  firstToUpper = () => {\n    // These are converting just first letter of the string.\n\n    // 1) Lowercase and uppercase letters are separated from each other just with 32 points in ascii table\n    // const asciiCodeForFirstLetter = input.charCodeAt(0);\n    // const upperCaseLetterAlternative = String.fromCharCode(asciiCodeForFirstLetter - 32)\n    // return upperCaseLetterAlternative + input.slice(1);\n\n    // 2) Using javascript build-in method toUpperCase() as alternative\n    // return `${stringToFormat.charAt(0).toUpperCase()}${stringToFormat.slice(1)}`;\n\n    // 3) Using regex as alternative for method charAt()\n    // return stringToFormat.replace(/ˆ\\w/, c => c.toUpperCase());\n\n    // let result = '';\n    // for (let i = 0; i < input.length; ++i) {\n    //   let charCode = input.charCodeAt(i);\n    //   if (charCode < 65 || charCode > 90) {\n    //     // NOT an uppercase ASCII character\n    //     // Append the original character\n    //     result += input.substr(i, 1);\n    //   } else {\n    //     // Character in the ['A'..'Z'] range\n    //     // Append the lowercase character\n    //     result += String.fromCharCode(charCode + 32);\n    //   }\n    // }\n    //\n    // return result;\n    // const splicedValue = this.state.value.split(\" \");\n    // const toUpper = splicedValue.map(word => {\n    //   const value = word.replace(/ˆ\\w/, c => {return c.toUpperCase()})\n    //   console.log(word, value);\n    //   return value;\n    // });\n    // const joinedValue = toUpper.join(\" \");\n  // const reg = new RegExp(\"\\\\\\\\b[a-zA-Z]\");\n\n  // const splittedValue = this.state.value.split(\" \");\n  // const toUpper = splittedValue.map(word => word.replace(/^\\w/, function (chr) {return chr.toUpperCase();}))\n\n\n    // console.log(toUpper, toUpper.join(\" \"));\n\n    // console.log(this.state.value.split(\" \").map(word => word.replace(/^\\w/, function (chr) {return chr.toUpperCase();})).join(\" \"));\n    const result = this.coolAdd(4, 5);\n    const result1 = this.coolAdd(4)(5);\n\n    console.log(result, result1)\n  }\n\n  coolAdd = (firstArg, secondArg) => {\n    if (secondArg) {\n      return firstArg + secondArg;\n    }\n\n    return (secondArgument) => {\n      return firstArg + secondArgument;\n    }\n  }\n\n  onInputChange = ({target}) => {\n    this.setState({value: target.value})\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <input\n          value={this.state.value}\n          onChange={this.onInputChange}\n        />\n        <button\n          onClick={this.firstToUpper}\n        >\n          click\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}